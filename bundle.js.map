{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/actor.ts","src/actorType.ts","src/gbl.ts","src/main.ts","src/matchColor.ts","src/snake.ts","src/states/bootState.ts","src/states/gameState.ts","src/states/menuState.ts","src/states/preloadState.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ActorType } from './actorType';\nimport { Gbl } from './gbl';\nimport { MatchColor } from './matchColor';\n\nexport class Actor extends Phaser.Sprite {\n\n  public gridPosition:Phaser.Point;\n\n  public color:MatchColor;\n\n  public actoryType:ActorType;\n\n  private _sheet:string;\n\n  constructor (game:Phaser.Game, sheet:string) {\n    super(game, 0, 0);\n    this._sheet = sheet;\n    this.loadTexture(this._sheet);\n    this.gridPosition = new Phaser.Point();\n    this.anchor.set(0.5);\n    game.add.existing(this);\n  }\n\n  public init (x:number, y:number, color:MatchColor, actorType:ActorType, sprite:string):void {\n    this.updatePosition(x, y);\n    this.color = color;\n    this.actoryType = actorType;\n    this.updateFrame(sprite);\n  }\n\n  public updatePosition (x:number, y:number):void {\n    this.gridPosition.x = x;\n    this.gridPosition.y = y;\n    const worldPos:Phaser.Point = Gbl.gridToWorld(x, y);\n    this.x = worldPos.x;\n    this.y = worldPos.y;\n  }\n\n  public updateFrame (sprite:string):void {\n    this.frameName = this._getColorString(sprite);\n  }\n\n  public _getColorString (name:string):string {\n    let stringName:string = name;\n\n    switch (this.color) {\n      case MatchColor.BLUE:\n        stringName += '_blue';\n        break;\n\n      case MatchColor.GREEN:\n        stringName += '_green';\n        break;\n\n      case MatchColor.RED:\n        stringName += '_red';\n        break;\n\n      case MatchColor.YELLOW:\n        stringName += '_yellow';\n        break;\n    }\n\n    return stringName;\n  }\n\n}\n","\nexport enum ActorType {\n  HEAD,\n  BODY,\n  TARGET,\n\n} // ActorType\n","\nexport class Gbl {\n  public static readonly TILESIZE:number = 24;\n  \n  public static currentLevel:number = 1;\n  public static currentDelay:number = 380;\n  public static currentTargets:number = 8;\n\n  public static gridWidth:number;\n  public static gridHeight:number;\n\n  public static muted:boolean = false;\n\n  private static _minX:number;\n  private static _minY:number;\n\n  private static _minDelay:number = 140;\n  private static _delayStep:number = 20;\n\n  private static _maxTargets:number = 120;\n  private static _minTargetStep:number = 5;\n  private static _maxTargetStep:number = 8;\n\n  public static init (gridWidth:number, gridHeight:number, center:Phaser.Point):void {\n    Gbl.gridWidth = gridWidth;\n    Gbl.gridHeight = gridHeight;\n\n    Gbl._minX = center.x - gridWidth * Gbl.TILESIZE * 0.5 + Gbl.TILESIZE * 0.5;\n    Gbl._minY = center.y - gridHeight * Gbl.TILESIZE * 0.5 + Gbl.TILESIZE * 0.5;\n\n  } // init\n\n  public static gridToWorld (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(Gbl._minX + x * Gbl.TILESIZE, Gbl._minY + y * Gbl.TILESIZE);\n\n  } // gridToWorld\n\n  public static worldToGrid (x:number, y:number):Phaser.Point {\n    return new Phaser.Point(Math.floor((x - Gbl._minX) / Gbl.TILESIZE), Math.floor((y - Gbl._minY) / Gbl.TILESIZE));\n\n  } // worldToGrid\n\n  public static nextLevel ():void {\n    Gbl.currentLevel++;\n    if (Gbl.currentDelay > Gbl._minDelay) {\n      Gbl.currentDelay -= Gbl._delayStep;\n    }\n    if (Gbl.currentTargets < Gbl._maxTargets) {\n      Gbl.currentTargets += Math.floor(Math.random() * (Gbl._maxTargetStep - Gbl._minTargetStep) + Gbl._minTargetStep);\n      if (Gbl.currentTargets > Gbl._maxTargets) {\n        Gbl.currentTargets = Gbl._maxTargets;\n      }\n    }\n\n  } // nextLevel\n\n} // Gbl\n","\nimport { BootState } from './states/bootState';\nimport { GameState } from './states/gameState';\nimport { MenuState } from './states/menuState';\nimport { PreloadState } from './states/preloadState';\n\nclass Main extends Phaser.Game {\n\n  constructor () {\n    super(800, 600, Phaser.AUTO, 'container');\n\n    this.state.add('boot', BootState);\n    this.state.add('preload', PreloadState);\n    this.state.add('menu', MenuState);\n    this.state.add('game', GameState);\n\n    this.state.start('boot');\n  \n  } // constructor\n\n} // Main\n\nwindow.onload = () => {\n  new Main();\n};\n","export enum MatchColor {\n  BLUE,\n  GREEN,\n  RED,\n  YELLOW,\n  NONE,\n\n} // MatchColor\n","import { Actor } from './actor';\nimport { ActorType } from './actorType';\nimport { MatchColor } from './matchColor';\nimport { GameState } from './states/gameState';\n\nexport class Snake {\n\n  public body:Actor[];\n  public alive:boolean = true;\n\n  public currentDirection:Phaser.Point;\n\n  private readonly ZERO:Phaser.Point = new Phaser.Point(0, 0);\n\n  private _state:GameState;\n\n  constructor (state:GameState, x:number, y:number, colors:MatchColor[], prevBody:Actor[] = null) {\n    this._state = state;\n    this.body = [];\n    this.currentDirection = new Phaser.Point(0, 1);\n    \n    if (prevBody) {\n      this.body = prevBody;\n      this.updateSprites();\n    } else {\n      for (let i:number = 0; i < colors.length; i++) {\n        const part:Actor = state.actorGroup.getFirstExists(false);\n        part.reset(0, 0);\n        const color:MatchColor = colors[i];\n        if (i === 0) {\n          part.init(x, y - i, color, ActorType.HEAD, 'head_end');\n          part.angle = 180;\n        } else if (i === length - 1) {\n          part.init(x, y - i, color, ActorType.BODY, 'body_end');\n        } else {\n          part.init(x, y - i, color, ActorType.BODY, 'body_middle');\n        }\n        this.body.push(part);\n      }\n    }\n    \n  } // constructor\n\n  public updateSnake (newDirection:Phaser.Point):void {\n    if (this.validDirection(newDirection)) {\n      this.currentDirection.set(newDirection.x, newDirection.y);\n    }\n\n    const oldPos:Phaser.Point = new Phaser.Point();\n    const newPos:Phaser.Point = Phaser.Point.add(this.body[0].gridPosition, this.currentDirection);\n    \n    for (const part of this.body) {\n      oldPos.x = part.gridPosition.x;\n      oldPos.y = part.gridPosition.y;\n      part.updatePosition(newPos.x, newPos.y);\n      newPos.x = oldPos.x;\n      newPos.y = oldPos.y;\n    }\n    this.updateSprites();\n\n  } // updateSnake\n\n  public hit (x:number, y:number):boolean {\n    let hit:boolean = false;\n    for (const part of this.body) {\n      if (part.gridPosition.x === x && part.gridPosition.y === y) {\n        hit = true;\n      }\n    }\n\n    return hit;\n\n  } // hit\n\n  public updateSprites ():void {\n    for (let i:number = 0; i < this.body.length; i++) {\n      const part:Actor = this.body[i];\n      this._setSprite(i, part);\n    }\n\n  } // updateSprites\n\n  public moveDown ():void {\n    for (const part of this.body) {\n      part.updatePosition(part.gridPosition.x, part.gridPosition.y + 1);\n    }\n\n  } // moveDown\n\n  public validDirection (direction:Phaser.Point):boolean {\n    return !Phaser.Point.add(this.currentDirection, direction).equals(this.ZERO);\n\n  } // _validDirection\n\n  private _setSprite (index:number, part:Actor):void {\n    const pos:Phaser.Point = this.body[index].gridPosition;\n    let nextPos:Phaser.Point;\n    let prevPos:Phaser.Point;\n    if (index === 0) {\n      if (this.body.length === 1) {\n        if (part.actoryType === ActorType.HEAD) {\n          part.updateFrame('head_single');\n        } else {\n          part.updateFrame('body_single');\n        }\n      } else {\n        nextPos = this.body[index + 1].gridPosition;\n        if (part.actoryType === ActorType.HEAD) {\n          part.updateFrame('head_end');\n        } else {\n          part.updateFrame('body_end');\n        }\n        if (nextPos.x > pos.x) {\n          part.angle = 270;\n        } else if (nextPos.x < pos.x) {\n          part.angle = 90;\n        } else if (nextPos.y > pos.y) {\n          part.angle = 0;\n        } else if (nextPos.y < pos.y) {\n          part.angle = 180;\n        }\n      }\n    } else if (index === this.body.length - 1) {\n      prevPos = this.body[index - 1].gridPosition;\n      part.updateFrame('body_end');\n      if (prevPos.x > pos.x) {\n        part.angle = 270;\n      } else if (prevPos.x < pos.x) {\n        part.angle = 90;\n      } else if (prevPos.y > pos.y) {\n        part.angle = 0;\n      } else if (prevPos.y < pos.y) {\n        part.angle = 180;\n      }\n    } else {\n      nextPos = this.body[index + 1].gridPosition;\n      prevPos = this.body[index - 1].gridPosition;\n      if (nextPos.x === prevPos.x || nextPos.y === prevPos.y) {\n        part.updateFrame('body_middle');\n        part.angle = 0;\n      } else {\n        part.updateFrame('body_corner');\n        if ((pos.x - nextPos.x === 1 && pos.y - prevPos.y === 1) ||\n          (pos.x - prevPos.x === 1 && pos.y - nextPos.y === 1)) {\n          part.angle = 180;\n        } else if ((pos.x - nextPos.x === -1 && pos.y - prevPos.y === 1) ||\n          (pos.x - prevPos.x === -1 && pos.y - nextPos.y === 1)) {\n          part.angle = 270;\n        } else if ((pos.x - nextPos.x === -1 && pos.y - prevPos.y === -1) ||\n          (pos.x - prevPos.x === -1 && pos.y - nextPos.y === -1)) {\n          part.angle = 0;\n        } else if ((pos.x - nextPos.x === 1 && pos.y - prevPos.y === -1) ||\n          (pos.x - prevPos.x === 1 && pos.y - nextPos.y === -1)) {\n          part.angle = 90;\n        }\n      }\n    }\n\n  } // _setSprite\n\n  private _getRndColor ():MatchColor {\n    const nr:number = this._state.rnd.between(0, 3);\n    \n    return nr;\n  }\n\n} // _getRndColor\n","\nexport class BootState extends Phaser.State {\n\n  public preload ():void {\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n    this.time.advancedTiming = true;\n\n  } // preload\n\n  public create ():void {\n    this.state.start('preload');\n\n  } // create\n\n} // BootState\n","import { Actor } from '../actor';\nimport { ActorType } from '../actorType';\nimport { Gbl } from '../gbl';\nimport { MatchColor } from '../matchColor';\nimport { Snake } from '../snake';\n\nexport class GameState extends Phaser.State {\n\n  public actorGroup:Phaser.Group;\n\n  private _gridWidth:number = 15;\n  private _gridHeight:number = 24;\n\n  private _moveTimer:number = 0;\n\n  private _fallDelay:number = 30;\n  private _fallTimer:number = 0;\n\n  private _newDirection:Phaser.Point;\n\n  private _currentSnake:Snake;\n\n  private _grid:MatchColor[][];\n\n  private _targets:Actor[];\n  private _deadSnakes:Snake[];\n\n  private _minSnakeLength:number = 2;\n  private _maxSnakeLength:number = 5;\n\n  private _startPos:Phaser.Point = new Phaser.Point(7, 0);\n\n  private _handelingMatches:boolean = false;\n  private _movingSnakes:boolean = false;\n\n  private _gameOver:boolean = false;\n  private _levelComplete:boolean = false;\n  private _started:boolean = false;\n  private _gameOverText:Phaser.Sprite;\n  private _levelCompleteText:Phaser.Sprite;\n\n  private _hasMoved:boolean = false;\n\n  private _nextColors:MatchColor[];\n  private _nextSnake:Actor[];\n\n  private _moveSound:Phaser.Sound;\n  private _matchSound:Phaser.Sound;\n  private _hitSound:Phaser.Sound;\n\n  private _leftKey:Phaser.Key;\n  private _rightKey:Phaser.Key;\n  private _upKey:Phaser.Key;\n  private _downKey:Phaser.Key;\n  private _spaceKey:Phaser.Key;\n  private _mKey:Phaser.Key;\n\n  public create ():void {\n    this._handelingMatches = false;\n    this._movingSnakes = false;\n    this._gameOver = false;\n    this._levelComplete = false;\n    this._hasMoved = false;\n\n    this._nextColors = [];\n    this._nextSnake = [];\n\n    this._moveSound = this.game.add.audio('move');\n    this._matchSound = this.game.add.audio('match');\n    this._hitSound = this.game.add.audio('hit');\n\n    this.game.sound.setDecodedCallback([this._moveSound, this._matchSound, this._hitSound], this._startGame, this);\n\n    Gbl.init(this._gridWidth, this._gridHeight,\n      new Phaser.Point(this.game.world.centerX, this.game.world.centerY));\n    \n    const background:Phaser.Sprite = this.game.add.sprite(\n      this.game.world.centerX, this.game.world.centerY, 'grid');\n    background.anchor.set(0.5);\n\n    const nextBorder:Phaser.Sprite = this.game.add.sprite(\n      712, 168, 'sprites', 'next_border');\n    nextBorder.anchor.set(0.5);\n\n    this.actorGroup = this.add.group();\n    for (let i:number = 0; i < 300; i++) {\n      const actor:Actor = new Actor(this.game, 'sprites');\n      this.actorGroup.add(actor);\n      actor.kill();\n    }\n\n    const border:Phaser.Sprite = this.game.add.sprite(\n      this.game.world.centerX, this.game.world.centerY, 'border');\n    border.anchor.set(0.5);\n\n    this._gameOverText = this.game.add.sprite(\n      this.game.world.centerX, this.game.world.centerY, 'sprites', 'game_over');\n    this._gameOverText.anchor.set(0.5);\n    this._gameOverText.visible = false;\n\n    this._levelCompleteText = this.game.add.sprite(\n      this.game.world.centerX, this.game.world.centerY, 'sprites', 'level_complete');\n    this._levelCompleteText.anchor.set(0.5);\n    this._levelCompleteText.visible = false;\n\n    this._grid = [];\n    for (let y:number = 0; y < this._gridHeight; y++) {\n      const row:MatchColor[] = [];\n      for (let x:number = 0; x < this._gridWidth; x++) {\n        row.push(MatchColor.NONE);\n      }\n      this._grid.push(row);\n    }\n\n    const textStyle:Phaser.PhaserTextStyle = { font: '28px Arial Black', fill: '#ffffff' };\n    this.game.add.text(16, 70, 'Level: ' + Gbl.currentLevel, textStyle);\n\n    textStyle.font = '24px Arial Black';\n    this.game.add.text(680, 64, 'Next', textStyle);\n\n    this._deadSnakes = [];\n    \n    this._setTargets(Gbl.currentTargets);\n\n    this._newDirection = new Phaser.Point(0, 1);\n\n    this._setNextColors();\n\n    this._createSnake();\n    this._setNextColors();\n\n    this._leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n    this._leftKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n    this._rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\n    this._rightKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n    this._upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\n    this._upKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n    this._downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\n    this._downKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n    this._spaceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    this._spaceKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n    this._mKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M);\n    this._mKey.onDown.add((key:Phaser.Key) => {\n      this._handleInput(key.keyCode);\n    });\n\n  } // create\n\n  public update ():void {\n    if (!this._started || this._gameOver || this._levelComplete) {\n      return;\n    }\n\n    if (this._movingSnakes) {\n      if (this._fallTimer < this._fallDelay) {\n        this._fallTimer += this.game.time.elapsed;\n      } else {\n        this._fallTimer = 0;\n        this._moveSnakesDown();\n      }\n    }\n    if (this._handelingMatches) {\n      return;\n    }\n\n    if (this._moveTimer < Gbl.currentDelay) {\n      this._moveTimer += this.game.time.elapsed;\n    } else {\n      this._moveTimer = 0;\n      let nextPos:Phaser.Point;\n      if (this._currentSnake.validDirection(this._newDirection)) {\n        nextPos = Phaser.Point.add(this._currentSnake.body[0].gridPosition, this._newDirection);\n      } else {\n        nextPos = Phaser.Point.add(this._currentSnake.body[0].gridPosition, this._currentSnake.currentDirection);\n      }\n      \n      if (!this._hitBounds(nextPos.x, nextPos.y) && this._positionFree(nextPos.x, nextPos.y) &&\n        !this._currentSnake.hit(nextPos.x, nextPos.y)) {\n\n        this._currentSnake.updateSnake(this._newDirection);\n        if (!Gbl.muted) {\n          this._moveSound.play();\n        }\n      } else {\n        for (const part of this._currentSnake.body) {\n          if (part.gridPosition.y < 0) {\n            this._gameOver = true;\n            this._gameOverText.visible = true;\n          }\n        }\n        if (!Gbl.muted) {\n          this._hitSound.play();\n        }\n        \n        this._deadSnakes.push(this._currentSnake);\n        this._currentSnake = null;\n        this._handelingMatches = true;\n        this._movingSnakes = true;\n        this._fallTimer = 0;\n      }\n    }\n  } // update\n\n  public render ():void {\n    // this.game.debug.text(this.time.fps.toString() || '--', 2, 14, '#00ff00');\n\n  } // render\n\n  private _startGame ():void {\n    this._started = true;\n  }\n\n  private _handleInput (key:Phaser.KeyCode):void {\n    if ((!this._started || this._gameOver || this._levelComplete) &&\n    (key !== Phaser.Keyboard.SPACEBAR && key !== Phaser.Keyboard.M)) {\n      return;\n    }\n\n    switch (key) {\n      case Phaser.Keyboard.LEFT:\n        this._newDirection.set(-1, 0);\n        break;\n\n      case Phaser.Keyboard.RIGHT:\n        this._newDirection.set(1, 0);\n        break;\n\n      case Phaser.Keyboard.UP:\n        this._newDirection.set(0, -1);\n        break;\n\n      case Phaser.Keyboard.DOWN:\n        this._newDirection.set(0, 1);\n        break;\n\n      case Phaser.Keyboard.SPACEBAR:\n        if (this._gameOver) {\n          this.state.start('menu');\n        } else if (this._levelComplete) {\n          Gbl.nextLevel();\n          this.state.start('game');\n        }\n        break;\n\n      case Phaser.Keyboard.M:\n        Gbl.muted = !Gbl.muted;\n        break;\n    }\n  }\n\n  private _setNextColors ():void {\n    this._nextColors = [];\n    const len:number = this.rnd.between(this._minSnakeLength, this._maxSnakeLength);\n    for (let i:number = 0; i < len; i++) {\n      this._nextColors.push(this.rnd.between(0, 3));\n    }\n    for (const part of this._nextSnake) {\n      part.kill();\n    }\n    \n    this._nextSnake = [];\n    for (let i:number = 0; i < this._nextColors.length; i++) {\n      const actor:Actor = this.actorGroup.getFirstExists(false);\n      actor.reset(0, 0);\n      if (i === 0) {\n        actor.init(20, 8 - i, this._nextColors[i], ActorType.HEAD, 'head_end');\n        actor.angle = 180;\n      } else if (i === this._nextColors.length - 1) {\n        actor.init(20, 8 - i, this._nextColors[i], ActorType.BODY, 'body_end');\n        actor.angle = 0;\n      } else {\n        actor.init(20, 8 - i, this._nextColors[i], ActorType.BODY, 'body_middle');\n        actor.angle = 0;\n      }\n      this._nextSnake.push(actor);\n    }\n  }\n\n  private _createSnake ():void {\n    if (this._grid[this._startPos.y][this._startPos.x] !== MatchColor.NONE) {\n      this._gameOver = true;\n      this._gameOverText.visible = true;\n    }\n    this._moveTimer = 0;\n    this._newDirection.set(0, 1);\n    this._currentSnake = new Snake(this, this._startPos.x, this._startPos.y,\n      this._nextColors);\n\n  } // _createSnake\n\n  private _clearGrid ():void {\n    for (let y:number = 0; y < this._gridHeight; y++) {\n      for (let x:number = 0; x < this._gridWidth; x++) {\n        this._grid[y][x] = MatchColor.NONE;\n      }\n    }\n\n  } // _clearGrid\n\n  private _hitBounds (x:number, y:number):boolean {\n    return x < 0 || x >= this._gridWidth || y < 0 || y >= this._gridHeight;\n\n  } // _hitBounds\n\n  private _positionFree (x:number, y:number):boolean {\n    return this._grid[y][x] === MatchColor.NONE;\n\n  } // _positionFree\n\n  private _setTargets (nrOfTargets:number):void {\n    this._targets = [];\n    for (let i:number = 0; i < nrOfTargets; i++) {\n      let foundPos:boolean = false;\n      let rndX:number;\n      let rndY:number;\n      while (!foundPos) {\n        rndX = this.rnd.between(0, this._gridWidth - 1);\n        rndY = this.rnd.between(7, this._gridHeight - 1);\n        if (this._grid[rndY][rndX] === MatchColor.NONE) {\n          foundPos = true;\n          const color:MatchColor = this.rnd.between(0, 3);\n          const target:Actor = this.actorGroup.getFirstExists(false);\n          target.reset(0, 0);\n          target.init(rndX, rndY, color, ActorType.TARGET, 'target');\n          this._grid[rndY][rndX] = color;\n          this._targets.push(target);\n        }\n      }\n    }\n\n  } // _setTargets\n\n  private _moveSnakesDown ():void {\n    let foundSnakeToMove:boolean = false;\n    for (const snake of this._deadSnakes) {\n      const body:Actor[] = snake.body;\n      const lowPositions:Phaser.Point[] = [];\n      for (const part of body) {\n        const x:number = part.gridPosition.x;\n        const y:number = part.gridPosition.y + 1;\n        if (!snake.hit(x, y)) {\n          lowPositions.push(new Phaser.Point(x, y));\n        }\n      }\n\n      let canMove:boolean = true;\n      for (const pos of lowPositions) {\n        if (pos.y >= this._gridHeight || this._grid[pos.y][pos.x] !== MatchColor.NONE) {\n          canMove = false;\n          break;\n        }\n      }\n\n      if (canMove) {\n        for (const part of body) {\n          const pos:Phaser.Point = part.gridPosition;\n          this._grid[pos.y][pos.x] = MatchColor.NONE;\n        }\n        snake.moveDown();\n        this._hasMoved = true;\n        foundSnakeToMove = true;\n      }\n      for (const part of body) {\n        const pos:Phaser.Point = part.gridPosition;\n        this._grid[pos.y][pos.x] = part.color;\n      }\n    }\n\n    if (!foundSnakeToMove) {\n      if (this._hasMoved) {\n        if (!Gbl.muted) {\n          this._hitSound.play();\n        }\n        \n        this._hasMoved = false;\n      }\n      \n      if (this._getMatches()) {\n        if (!Gbl.muted) {\n          this._matchSound.play();\n        }\n        \n        this._moveSnakesDown();\n      } else {\n        this._handelingMatches = false;\n        this._movingSnakes = false;\n        if (this._targets.length === 0) {\n          this._levelComplete = true;\n          this._levelCompleteText.visible = true;\n        }\n        this._createSnake();\n        this._setNextColors();\n      }\n    }\n\n  } // _moveSnakeDown\n\n  private _getMatches ():boolean {\n    let colorPositions:Phaser.Point[] = [];\n    let currentColor:MatchColor;\n    const positionsMatched:Phaser.Point[] = [];\n\n    for (let y:number = 0; y < this._gridHeight; y++) {\n      colorPositions = [new Phaser.Point(0, y)];\n      currentColor = this._grid[y][0];\n      for (let x:number = 1; x < this._gridWidth; x++) {\n        const color:MatchColor = this._grid[y][x];\n        if (color === MatchColor.NONE || color !== currentColor) {\n          if (colorPositions.length >= 4) {\n            for (const c of colorPositions) {\n              positionsMatched.push(new Phaser.Point(c.x, c.y));\n            }\n          }\n          colorPositions = [new Phaser.Point(x, y)];\n          currentColor = color;\n        } else if (x === this._gridWidth - 1) {\n          colorPositions.push(new Phaser.Point(x, y));\n          if (colorPositions.length >= 4) {\n            for (const c of colorPositions) {\n              positionsMatched.push(new Phaser.Point(c.x, c.y));\n            }\n          }\n        } else {\n          colorPositions.push(new Phaser.Point(x, y));\n        }\n      }\n    }\n\n    for (let x:number = 0; x < this._gridWidth; x++) {\n      colorPositions = [new Phaser.Point(x, 0)];\n      currentColor = this._grid[0][x];\n      for (let y:number = 1; y < this._gridHeight; y++) {\n        const color:MatchColor = this._grid[y][x];\n        if (color === MatchColor.NONE || color !== currentColor) {\n          if (colorPositions.length >= 4) {\n            for (const c of colorPositions) {\n              positionsMatched.push(new Phaser.Point(c.x, c.y));\n            }\n          }\n          colorPositions = [new Phaser.Point(x, y)];\n          currentColor = color;\n        } else if (y === this._gridHeight - 1) {\n          colorPositions.push(new Phaser.Point(x, y));\n          if (colorPositions.length >= 4) {\n            for (const c of colorPositions) {\n              positionsMatched.push(new Phaser.Point(c.x, c.y));\n            }\n          }\n        } else {\n          colorPositions.push(new Phaser.Point(x, y));\n        }\n      }\n    }\n\n    this._removeMatches(positionsMatched);\n\n    return positionsMatched.length > 0;\n\n  } // _getMatches\n\n  private _removeMatches (positionsMatched:Phaser.Point[]):void {\n    for (const pos of positionsMatched) {\n      let hitTarget:boolean = false;\n      for (const target of this._targets) {\n        if (pos.equals(target.gridPosition)) {\n          hitTarget = true;\n          target.kill();\n          this._targets.splice(this._targets.indexOf(target), 1);\n          this._grid[pos.y][pos.x] = MatchColor.NONE;\n          break;\n        }\n      }\n\n      if (!hitTarget) {\n        for (const snake of this._deadSnakes) {\n          for (const part of snake.body) {\n            if (part) {\n              if (pos.equals(part.gridPosition)) {\n                part.kill();\n                this._grid[pos.y][pos.x] = MatchColor.NONE;\n                break;\n              }\n            }\n            \n          }\n        }\n      }\n    }\n\n    const newSnakes:Actor[][] = [];\n    for (const snake of this._deadSnakes) {\n      let parts:Actor[] = [];\n      for (let i:number = 0; i < snake.body.length; i++) {\n        const part:Actor = snake.body[i];\n        if (!part.alive) {\n          if (parts.length > 0) {\n            newSnakes.push(parts);\n            parts = [];\n          }\n        } else if (i === snake.body.length - 1) {\n          parts.push(part);\n          newSnakes.push(parts);\n        } else {\n          parts.push(part);\n        }\n      }\n    }\n    this._deadSnakes = [];\n    for (const newSnake of newSnakes) {\n      const snake:Snake = new Snake(this, 0, 0, this._nextColors, newSnake);\n      this._deadSnakes.push(snake);\n    }\n\n  } // _removeMatches\n\n} // GameState\n","import { Gbl } from '../gbl';\n\nexport class MenuState extends Phaser.State {\n\n  public create ():void {\n    const title:Phaser.Sprite = this.game.add.sprite(\n      this.world.centerX, 100, 'sprites', 'title');\n    title.anchor.set(0.5);\n\n    const snake:Phaser.Sprite = this.game.add.sprite(\n      this.world.centerX, this.world.centerY, 'sprites', 'title_snake');\n    snake.anchor.set(0.5);\n\n    const instruction:Phaser.Sprite = this.game.add.sprite(\n      this.world.centerX, 420, 'sprites', 'space_to_start');\n    instruction.anchor.set(0.5);\n\n    const name:Phaser.Sprite = this.game.add.sprite(\n      this.world.width - 20, 580, 'sprites', 'my_name');\n    name.anchor.set(1);\n\n  } // create\n\n  public update ():void {\n    if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {\n      this._startGame();\n    }\n\n  } // update\n\n  private _startGame ():void {\n    Gbl.currentLevel = 1;\n    Gbl.currentDelay = 375;\n    Gbl.currentTargets = 120;\n    this.state.start('game');\n\n  } // _startGame\n\n} // MenuState\n","\nexport class PreloadState extends Phaser.State {\n\n  public preload ():void {\n    this.load.image('grid', 'assets/images/grid.png');\n    this.load.image('border', 'assets/images/border.png');\n\n    this.load.atlasJSONArray('sprites', 'assets/images/sprites.png', 'assets/images/sprites.json');\n\n    this.load.audio('move', 'assets/sounds/move.mp3');\n    this.load.audio('match', 'assets/sounds/match.mp3');\n    this.load.audio('hit', 'assets/sounds/hit.mp3');\n    \n  } // preload\n\n  public create ():void {\n    this.state.start('menu');\n    \n  } // create\n\n} // PreloadState\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}